% ============ Buscar tareas ===============================================================================================================================

% Predicado para buscar todas las tareas pendientes en la base de conocimientos.
mostrar_tareas_pendientes :-
    tarea(Proyecto, Nombre, Tipo, 'Pendiente', PersonaAsignada, FechaCierre),
    format('Proyecto: ~w, Tarea: ~w, Tipo: ~w, Persona Asignada: ~w, Fecha de Cierre: ~w~n', [Proyecto, Nombre, Tipo, PersonaAsignada, FechaCierre]),
    buscar_tareas_libres_para_persona,
    fail.
mostrar_tareas_pendientes.

obtener_nombre_existente(Nombre) :-
    write('Ingrese el nombre de la persona: '),
    read(Nombre),
    (   persona(Nombre, _, _, _, _)  % Verificar si el nombre existe en la base de conocimientos
    ->  true
    ;   write('El nombre de la persona no existe en la base de conocimientos.'), nl,
        obtener_nombre_existente(Nombre)  % Volver a solicitar el nombre si no existe
    ).

buscar_tareas_libres_para_persona :-
    obtener_nombre_existente(Persona),  % Pedir el nombre de la persona existente
    persona(Persona, _, _, _, TiposTareasPersona),  % Obtener los tipos de tareas de la persona
    tarea(_, Nombre, TipoTarea, 'Pendiente', 'Sin asignar', _),
    member(TipoTarea, TiposTareasPersona),
    write('Nombre de la Tarea: '), write(Nombre), nl,
    write('Tipo de Tarea: '), write(TipoTarea), nl,
    nl,
    fail.
buscar_tareas_libres_para_persona.

% ================ Recomendar =========================================================================================================

% Verificar si un proyecto existe en la base de conocimientos
proyecto_existentel(Proyecto) :- proyecto(Proyecto, _, _, _, _).

% Verificar si una tarea existe en la base de conocimientos para un proyecto
tarea_existentel(Proyecto, Tarea) :- tarea(Proyecto, Tarea, _, _, _, _).

obtener_nombre_proyectol(Proyecto) :-
    write('Ingrese el nombre del proyecto: '),
    read(Proyecto).

obtener_nombre_tareal(Tarea) :-
    write('Ingrese el nombre de la tarea: '),
    read(Tarea).

personas_recomendadas_para_tarea :-
    obtener_nombre_proyectol(Proyecto),
    obtener_nombre_tareal(Tarea),
    (   proyecto_existentel(Proyecto), tarea_existentel(Proyecto, Tarea) ->
        personas_recomendadas(Proyecto, Tarea)
    ;
        write('El proyecto o la tarea no existen en la base de conocimientos.')
    ).
    
tareas_activas_persona(Persona, TareasActivas) :-
    findall(Tarea, tarea(_, Tarea, _, 'Pendiente', Persona, _), TareasActivas).

% Obtener la puntuación de Desarrollo Previo para una persona y un tipo de tarea
puntuacion_desarrollo_previo(Persona, TipoTarea, Puntuacion) :-
    findall(Tarea, tarea(_, Tarea, TipoTarea, _, Persona, _), Tareas),
    length(Tareas, NumeroTareas),
    Puntuacion is NumeroTareas * 2.

% Obtener la puntuación de Afinidad por Proyecto para una persona y un proyecto
puntuacion_afinidad_proyecto(Persona, Proyecto, Puntuacion) :-
    tarea(Proyecto, _, _, _, Persona, _),
    Puntuacion is 5;
    Puntuacion is 0.

% Obtener la puntuación total para una persona
puntuacion_total(Persona, Proyecto, Tarea, PuntuacionTotal) :-
    persona(Persona, _, _, Rating, TiposTareasPersona),
    member(Tarea, TiposTareasPersona),
    puntuacion_desarrollo_previo(Persona, Tarea, PuntuacionDesarrollo),
    puntuacion_afinidad_proyecto(Persona, Proyecto, PuntuacionAfinidad),
    tareas_activas_persona(Persona, TareasActivas),
    length(TareasActivas, TareasAbiertas),
    PuntuacionTotal is PuntuacionDesarrollo + PuntuacionAfinidad + Rating - (TareasAbiertas * 3).

% Obtener la lista de personas recomendadas para un proyecto y una tarea
personas_recomendadas(Proyecto, Tarea) :-
    findall([Persona, Puntuacion, TiposTareasPersona], puntuacion_total(Persona, Proyecto, Tarea, Puntuacion, TiposTareasPersona), PersonasConPuntuacion),
    sort(2, @>=, PersonasConPuntuacion, PersonasOrdenadas),
    mostrar_personas_ordenadas(PersonasOrdenadas).

    
% Mostrar la lista de personas ordenadas por puntuación
mostrar_personas_ordenadas([]).
mostrar_personas_ordenadas([[Persona, Puntuacion, TiposTareasPersona] | Resto]) :-
    write('Nombre: '), write(Persona), nl,
    write('Puntuacion: '), write(Puntuacion), nl,
    write('Tipos de tareas: '), write(TiposTareasPersona), nl,
    nl,
    mostrar_personas_ordenadas(Resto).

% ================ Asignar =========================================================================================================
% Asignar una tarea a una persona
asignar_tarea :-
    obtener_nombre_proyectol(Proyecto),
    obtener_nombre_tareal(Tarea),
    obtener_nombre_existente(Persona),
    (   proyecto_existente(Proyecto), tarea_existente(Proyecto, Tarea), persona_existente(Persona) ->
        (   tarea_sin_asignar(Proyecto, Tarea) ->
            retract(tarea(Proyecto, Tarea, Tipo, 'Pendiente', 'Sin asignar', Fecha)),
            assertz(tarea(Proyecto, Tarea, Tipo, 'Activa', Persona, Fecha)),
            write('La tarea se ha asignado a '), write(Persona), write(' y su estado se ha cambiado a Activa.')
        ;
            write('La tarea ya está asignada o no existe en la base de conocimientos.')
        )
    ;
        write('El proyecto, la tarea o la persona no existen en la base de conocimientos.')
    ).

% ------------------------------------------------------------------------

% Predicado para asignar una tarea a una persona en un proyecto.
asignar_tarea_a_persona(Proyecto, Tarea, Persona) :-
    % Verificar si la tarea está pendiente y sin asignar a alguien.
    tarea(Proyecto, Tarea, _, 'Pendiente', 'Sin asignar', _),
    % Asignar la tarea a la persona especificada.
    retract(tarea(Proyecto, Tarea, Tipo, 'Pendiente', 'Sin asignar', FechaCierre)),
    assertz(tarea(Proyecto, Tarea, Tipo, 'Activa', Persona, FechaCierre)),
    write('La tarea '), write(Tarea),
    write(' en el proyecto '), write(Proyecto),
    write(' ha sido asignada a '), write(Persona), nl.

% Ejemplo de uso:
% Asignar una tarea a una persona en un proyecto.
asignar_tarea_a_persona('Proyecto A', 'Tarea 1', 'Juan').
